// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxystreamproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentrifugoProxyStreamClient is the client API for CentrifugoProxyStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrifugoProxyStreamClient interface {
	Consume(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CentrifugoProxyStream_ConsumeClient, error)
	Communicate(ctx context.Context, opts ...grpc.CallOption) (CentrifugoProxyStream_CommunicateClient, error)
}

type centrifugoProxyStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrifugoProxyStreamClient(cc grpc.ClientConnInterface) CentrifugoProxyStreamClient {
	return &centrifugoProxyStreamClient{cc}
}

func (c *centrifugoProxyStreamClient) Consume(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CentrifugoProxyStream_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrifugoProxyStream_ServiceDesc.Streams[0], "/centrifugal.centrifugo.proxystream.CentrifugoProxyStream/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugoProxyStreamConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CentrifugoProxyStream_ConsumeClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type centrifugoProxyStreamConsumeClient struct {
	grpc.ClientStream
}

func (x *centrifugoProxyStreamConsumeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centrifugoProxyStreamClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (CentrifugoProxyStream_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrifugoProxyStream_ServiceDesc.Streams[1], "/centrifugal.centrifugo.proxystream.CentrifugoProxyStream/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugoProxyStreamCommunicateClient{stream}
	return x, nil
}

type CentrifugoProxyStream_CommunicateClient interface {
	Send(*CommunicateRequest) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type centrifugoProxyStreamCommunicateClient struct {
	grpc.ClientStream
}

func (x *centrifugoProxyStreamCommunicateClient) Send(m *CommunicateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centrifugoProxyStreamCommunicateClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrifugoProxyStreamServer is the server API for CentrifugoProxyStream service.
// All implementations must embed UnimplementedCentrifugoProxyStreamServer
// for forward compatibility
type CentrifugoProxyStreamServer interface {
	Consume(*SubscribeRequest, CentrifugoProxyStream_ConsumeServer) error
	Communicate(CentrifugoProxyStream_CommunicateServer) error
	mustEmbedUnimplementedCentrifugoProxyStreamServer()
}

// UnimplementedCentrifugoProxyStreamServer must be embedded to have forward compatible implementations.
type UnimplementedCentrifugoProxyStreamServer struct {
}

func (UnimplementedCentrifugoProxyStreamServer) Consume(*SubscribeRequest, CentrifugoProxyStream_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedCentrifugoProxyStreamServer) Communicate(CentrifugoProxyStream_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedCentrifugoProxyStreamServer) mustEmbedUnimplementedCentrifugoProxyStreamServer() {}

// UnsafeCentrifugoProxyStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrifugoProxyStreamServer will
// result in compilation errors.
type UnsafeCentrifugoProxyStreamServer interface {
	mustEmbedUnimplementedCentrifugoProxyStreamServer()
}

func RegisterCentrifugoProxyStreamServer(s grpc.ServiceRegistrar, srv CentrifugoProxyStreamServer) {
	s.RegisterService(&CentrifugoProxyStream_ServiceDesc, srv)
}

func _CentrifugoProxyStream_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CentrifugoProxyStreamServer).Consume(m, &centrifugoProxyStreamConsumeServer{stream})
}

type CentrifugoProxyStream_ConsumeServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type centrifugoProxyStreamConsumeServer struct {
	grpc.ServerStream
}

func (x *centrifugoProxyStreamConsumeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _CentrifugoProxyStream_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CentrifugoProxyStreamServer).Communicate(&centrifugoProxyStreamCommunicateServer{stream})
}

type CentrifugoProxyStream_CommunicateServer interface {
	Send(*Response) error
	Recv() (*CommunicateRequest, error)
	grpc.ServerStream
}

type centrifugoProxyStreamCommunicateServer struct {
	grpc.ServerStream
}

func (x *centrifugoProxyStreamCommunicateServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centrifugoProxyStreamCommunicateServer) Recv() (*CommunicateRequest, error) {
	m := new(CommunicateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrifugoProxyStream_ServiceDesc is the grpc.ServiceDesc for CentrifugoProxyStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentrifugoProxyStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "centrifugal.centrifugo.proxystream.CentrifugoProxyStream",
	HandlerType: (*CentrifugoProxyStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _CentrifugoProxyStream_Consume_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Communicate",
			Handler:       _CentrifugoProxyStream_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxystream.proto",
}
